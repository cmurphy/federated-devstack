---
- hosts: localhost
  connection: local
  vars:
    - uuid: "{{ ansible_default_ipv4['macaddress'] | to_uuid }}"
    - implementation: '{{ implementation }}'
    - local_entity_id: "https://mysp.example.com/{{ implementation }}/{{ uuid }}"
    - metadata_file_basename: "{{ local_entity_id|replace(':','_')|replace('/','_')|replace('-','_')|replace('___','_') }}"
  tasks:
    - include: configure-shibboleth.yml
      when: implementation == "shibboleth"
    - include: configure-mellon.yml
      when: implementation == "mellon"
    - name: set keystone trusted_dashboard
      ini_file:
        create: no
        dest: /etc/keystone/keystone.conf
        section: federation
        option: trusted_dashboard
        value: "http://{{ ansible_default_ipv4['address'] }}/dashboard/auth/websso/"
      notify:
        - restart apache
    - name: turn on keystone insecure_debug
      ini_file:
        create: no
        dest: /etc/keystone/keystone.conf
        section: DEFAULT
        option: insecure_debug
        value: true
      notify:
        - restart apache
    - name: copy redirect template
      copy:
        src: /opt/stack/keystone/etc/sso_callback_template.html
        dest: /etc/keystone/sso_callback_template.html
    # Configure Horizon
    - name: set horizon WEBSSO_ENABLED
      lineinfile:
        create: no
        dest: /opt/stack/horizon/openstack_dashboard/local/local_settings.py
        regexp: '^#?WEBSSO_ENABLED ?=.*$'
        line: 'WEBSSO_ENABLED = True'
      notify:
        - restart apache
    - name: set horizon WEBSSO_CHOICES
      lineinfile:
        create: no
        dest: /opt/stack/horizon/openstack_dashboard/local/local_settings.py
        regexp: '^#?WEBSSO_CHOICES ?= ?\(.*$'
        line: 'WEBSSO_CHOICES = (("credentials", _("Keystone Credentials")), ("mapped", _("Security Assertion Markup Language")),)'
      notify:
        - restart apache
    # Refresh apache and shibd so that keystone and shibboleth are in working order before trying to use them
    - meta: flush_handlers
    # Create federated resources
    - name: install shade
      pip:
        name: shade
      become: yes
      remote_user: root
    - name: create federated domain
      os_keystone_domain: name=federated_domain
      register: domain
    - name: create federated group
      os_group: name=federated_users domain_id="{{ domain.id }}"
    - name: add federated users to federated domain
      os_user_role:
        group: 'federated_users'
        domain: "{{ domain.id }}"
        role: 'Member'
    - name: check existence of identity provider
      shell: openstack identity provider show myidp
      ignore_errors: True
      changed_when: False
      register: check_idp
    - name: create identity provider
      shell: openstack identity provider create --remote-id https://idp.testshib.org/idp/shibboleth myidp
      when: check_idp|failed
    - name: define mapping rules
      template:
        dest: /opt/stack/rules.json
        src: ../templates/rules.json.j2
      register: define_mapping
    - name: check existence of mapping
      shell: openstack mapping show myidp_mapping
      ignore_errors: True
      changed_when: False
      register: check_mapping
    - name: create mapping
      shell: openstack mapping create --rules /opt/stack/rules.json myidp_mapping
      when: check_mapping|failed
    - name: update mapping
      shell: openstack mapping set --rules /opt/stack/rules.json myidp_mapping
      when: define_mapping['changed']
    - name: check existence of federation protocol
      shell: openstack federation protocol show mapped --identity-provider=myidp
      ignore_errors: True
      changed_when: False
      register: check_protocol
    - name: create federation protocol
      shell: openstack federation protocol create mapped --mapping myidp_mapping --identity-provider myidp
      when: check_protocol|failed
    # Register on testshib
    - name: download shibboleth metadata
      get_url:
        url: "http://{{ ansible_default_ipv4['address'] }}/Shibboleth.sso/Metadata"
        dest: "{{ ansible_env['HOME'] }}/mysp.example.com.{{ uuid }}.xml"
      register: metadata
      when: implementation == "shibboleth"
    - name: copy mellon metadata
      copy:
        src: "/etc/apache2/mellon/{{ metadata_file_basename }}.xml"
        dest: "{{ ansible_env['HOME'] }}/mysp.example.com.{{ uuid }}.xml"
      register: metadata
    - name: register on testshib
      # The URI module doesn't have an equivalent of -F to post files
      shell: "curl -X POST -F \"userfile=@{{ ansible_env['HOME'] }}/mysp.example.com.{{ uuid }}.xml\" https://www.testshib.org/procupload.php"
      args:
        warn: no
      when: metadata['changed']
  handlers:
    - name: restart shibd
      become: yes
      remote_user: root
      service: name=shibd state=restarted
    - name: restart apache
      become: yes
      remote_user: root
      service: name=apache2 state=restarted
